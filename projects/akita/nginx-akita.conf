upstream puma_akita {
  server unix:/var/log/akita/puma.sock fail_timeout=0;
}

# this is needed since SSL is happening in haproxy above nginx
map $http_x_forwarded_proto $real_scheme {
  default "http";
  https "https";
}

server {
  listen 80;

  client_max_body_size 4G;
  keepalive_timeout 10;

  error_page 500 502 503 504 /500.html;
  error_page 404 /404.html;

  # rewrite_log on;  # for debugging

  root /src/ember;

  # temp redirects for PLT-506
  location = /account/alerts-notifications {
      return 301 $real_scheme://$host/account/alerts;
  }

  location = /account/alerts-notifications/journal-alerts {
      return 301 $real_scheme://$host/account/alerts/journal-alerts;
  }

  location = /account/alerts-notifications/search-alerts {
      return 301 $real_scheme://$host/account/alerts/search-alerts;
  }

  rewrite ^/account/c/(.*)$ /test/$1 last;

  location ~ ^/(flanders|cas) {
      # set the headers so upstream SSL service is recignized when sending email links to users
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;

      proxy_max_temp_file_size 0;
      access_log /var/log/akita/nginx.access.log;
      error_log /var/log/akita/nginx.error.log;

      proxy_pass http://puma_akita;
  }

  location ^~ /assets/ {
      gzip_static on;
      expires max;
      add_header Cache-Control public;
  }


  location ~ ^/ {
      index index.html index.htm;

      # proxy_set_header X-Real-IP $remote_addr;
      # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      # proxy_set_header Host $http_host;

      proxy_max_temp_file_size 0;

      # If we have a file at the requested url, just serve it.
      if (-f $request_filename) {
          break;
      }

      # Serve all URLs that aren't on the filesystem and don't begin with /flanders as the ember-cli index.html
      rewrite ^ /index.html break;
  }

}

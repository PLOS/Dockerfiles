version: '2'

services:

  akita-lb:
    extends:
      service: haproxy
    ports:
      - "443:443"
    volumes:
      - ${DOCKERFILES}/projects/selfsigned.pem:/etc/ssl/cert.pem:ro
    # depends_on:           # must be specified in extending file, not here
    #   - "consulserver"

  akita-ssl:
    extends:
      service: haproxy
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ${DOCKERFILES}/projects/selfsigned.pem:/etc/ssl/cert.pem:ro
      - ${DOCKERFILES}/projects/akita/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    # depends_on:           # must be specified in extending file, not here
    #   - "akita-proxyable"



  # TODO: pass in service name so the name can by dynamic
  #
  # https://github.com/hashicorp/consul-template/issues/532

  akita-consultemplate:
    extends:
      service: consultemplate
    command: -consul=consulserver:8500 -wait=5s -template="/tmp/haproxy.cfg.ctmpl:/usr/local/etc/haproxy/haproxy.cfg:docker restart configurations_akita-lb_1"
    volumes:
      - ${DOCKERFILES}/projects/akita/haproxy.cfg.ctmpl:/tmp/haproxy.cfg.ctmpl:ro
    # volumes_from:   # you have to specify this value in the extended config
    #   - aktia-lb

  akita-proxyable:
    image: plos/akita:develop
    volumes:    # TEMP FOR TESTING NGINX REDIRECTS, REMOVE BEFORE MERGE!!!!!
      - ${DOCKERFILES}/projects/akita/nginx.conf:/etc/nginx/conf.d/nginx.conf:ro
    environment:
      - NED_SERVICE=http://nedapi:8080/v1
      - MAILER_ADDRESS=mailcatcher
      - MAILER_PORT=1025
      - NED_USERAPP=dev
      - NED_PASSWORD=dev
      - CAS_URL=https://nedcas:8443
      - SECRET_KEY_BASE=secretgoeshere
      - EXACTTARGET_ID=
      - EXACTTARGET_SECRET=
      - SALESFORCE_HOST=
      - SALESFORCE_CLIENT_ID=
      - SALESFORCE_CLIENT_SECRET=
      - SALESFORCE_USERNAME=
      - SALESFORCE_PASSWORD=
      - SALESFORCE_CONSUMER_APP=
      - SALESFORCE_CONSUMER_PASSWORD=
      - MOODLE_TOKEN=
      - RECAPTCHA_SECRET=
      # - SSL=none  # options = none, existingkeys
    # volumes:    # when using SSL=existingkeys
    #   - ${DOCKERFILES}/projects/selfsigned.key:/etc/nginx/ssl/nginx.key:ro
    #   - ${DOCKERFILES}/projects/selfsigned.crt:/etc/nginx/ssl/nginx.crt:ro

  nedcas-lb:
    extends:
      service: haproxy
    ports:
      - "8443:443"
    volumes:
      - ${DOCKERFILES}/projects/selfsigned.pem:/etc/ssl/cert.pem:ro
    # depends_on:           # must be specified in extending file, not here
    #   - "consulserver"

  nedcas-ssl:
    extends:
      service: haproxy
    ports:
      - "8443:443"
    volumes:
      - ${DOCKERFILES}/projects/selfsigned.pem:/etc/ssl/cert.pem:ro
      - ${DOCKERFILES}/projects/nedcas/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    # depends_on:           # must be specified in extending file, not here
    #   - "nedcas-proxyable"

  nedcas-consultemplate:
    extends:
      service: consultemplate
    command: -consul=consulserver:8500 -wait=5s -template="/tmp/haproxy.cfg.ctmpl:/usr/local/etc/haproxy/haproxy.cfg:docker restart configurations_nedcas-lb_1"
    volumes:
      - ${DOCKERFILES}/projects/nedcas/haproxy.cfg.ctmpl:/tmp/haproxy.cfg.ctmpl:ro
    # volumes_from:
    #   - nedcas-lb

  nedcas-proxyable:
    image: plos/nedcas:develop
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_USER=ned
      - MYSQL_USER_PASSWORD=ned
      - MYSQL_HOSTNAME=neddb
      - MYSQL_DATABASE=namedEntities
      - CAS_DATABASE=cas
      - NED_SERVICE=http://nedapi:8080/v1
      - REGISTRATION_BASE_URL=https://localhost   # TODO: fix this
      - COOKIE_DOMAIN=nedcas
      - CLUSTER_MEMBERS=localhost

  nedapi-lb:
    extends:
      service: haproxy
    ports:
      - "8081:8080"
    # depends_on:           # must be specified in extending file, not here
    #   - "consulserver"

  nedapi-consultemplate:
    extends:
      service: consultemplate
    command: -consul=consulserver:8500 -wait=5s -template="/tmp/haproxy.cfg.ctmpl:/usr/local/etc/haproxy/haproxy.cfg:docker restart configurations_nedapi-lb_1" # $$(docker ps -q -f name=nedapi-lb)
    volumes:
      - ${DOCKERFILES}/projects/nedapi/haproxy.cfg.ctmpl:/tmp/haproxy.cfg.ctmpl:ro
    # volumes_from:
    #   - nedapi-lb

  nedapi:
    extends: nedapi-proxyable
    ports:
      - 8081:8080

  nedapi-proxyable:
    image: plos/nedapi:develop
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_USER=ned
      - MYSQL_USER_PASSWORD=ned
      - MYSQL_HOSTNAME=neddb
      - MYSQL_DATABASE=namedEntities
      - RINGGOLD_DATABASE=ringgold
      - SEEDS=simpledev
    volumes:
      - ${DOCKERFILES}/projects/nedapi/seeds:/seeds:ro

  neddb:
    image: percona:5.6
    environment:
      - MYSQL_ROOT_PASSWORD=root
    volumes:    # enable to persist database between runs
      - ${DOCKERFILES}/projects/nedapi/mysql-custom.cnf:/etc/mysql/conf.d/mysq-custom.cnf:ro
    #   - /var/lib/mysql


  haproxy-template:
    image: haproxy-template
    environment:
      - FRONTEND_PORT=433
      - BACKEND=hostname:80
      # - MODE=ssl or loadbalance
    # volumes:
    #   - /usr/local/etc/haproxy
    #   - /dev/log:/dev/log

  # TODO: make a dockerfile for this so we can set some env vars and cover the two common cases. SSL and LB
  haproxy:
    image: haproxy:alpine
    # ports:
    #   - "1936:1936"
    volumes:
      - /usr/local/etc/haproxy
      - /dev/log:/dev/log

  consulserver:
    image: gliderlabs/consul-server
    command: -bootstrap -ui
    ports:
      - "8300:8300"
      - "8400:8400"
      - "8500:8500"
      - "8600:53/udp"

  consultemplate:
    image: avthart/consul-template
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock
    # environment:
    #   - CONSUL_TEMPLATE_LOG=debug

  mailcatcher:
    image: schickling/mailcatcher
    ports:
      - 1080:1080

  plosthemes:
    image: plosthemes:master

  wombat:
    image: plos/wombat:master
    # volumes:
    #   - ${DOCKERFILES}/../plos-themes:/root/themes
    #   - $HOME/data/plos-example-themes:/root/themes
    # volumes_from:
    #   - plosthemes    # this must be specified in the inheriting file if you want it.
    ports:
      - 8082:8080
    environment:
      - SERVER=http://rhino:8080
      - SOLR=http://solr:8080/select
      - CAS=https://localhost:8443/cas
      - EMAIL=plos-org.mail.protection.outlook.com
      - ROOT=/root/themes/
      # - DISABLE_COMMENTS=true
      # - ROOT_PAGE_PATH=/root/themes/content/rootPage.html

  rhino:
    image: plos/rhino:master
    ports:
      - 8080:8080
    volumes:
      - $HOME/datastores/ingest:/root/ingest
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_USER=ambra
      - MYSQL_USER_PASSWORD=ambra
      - MYSQL_HOSTNAME=ambradb
      - MYSQL_DATABASE=ambra
      - REPO_LOCATION=http://contentrepo:8080
      - CORPUS_BUCKET=corpus
      - EDITORIAL_BUCKET=cms
      - QUEUE_LOCATION=tcp://plosqueue:61616
      - USER_API_SERVER=http://nedapi:8080
      - USER_API_USER=dev
      - USER_API_AUTH=dev
      # - SOLR_URL=http://solr:8080/solr

# RUN: ./stack.sh common run --rm indexerminion
# DEBUG: ./stack.sh common run -p 8000:8000 --rm indexerminion
  indexerminion:
    image: plos/indexerminion:accman
    volumes:
      - /tmp/indexerminion:/cache   # caches between runs
    environment:
      - RHINO_SERVICE=http://rhino:8080
      - ALM_URL=http://alm-101.soma.plos.org
      - ALM_KEY=
      - COUNTER_DATABASE_URL=jdbc:mysql://counterdb/plosreports
      - COUNTER_DATABASE=plosreports
      - COUNTER_HOSTNAME=counterdb
      - COUNTER_DATABASE_USER=ambra
      - COUNTER_DATABASE_PASSWORD=ambra
      - COUNTER_DATABASE_ROOT_PASSWORD=root
      # - SOLR_SOURCE=http://solr:8080/solr
      - SOLR_SOURCE=http://api.plos.org
      - SOLR_SOURCE_REQUEST_HANDLER=/search # required for api.plos.org
      - SOLR_TARGETS=http://solr:8080/solr
      - ARTICLE_LIST=10.1371/journal.pone.0099781
      - DEBUG_FLAGS=-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n # needed for running in debug mode

  counter:
    image: plos/counter:master
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_USER=ambra
      - MYSQL_USER_PASSWORD=ambra
      - MYSQL_HOSTNAME=counterdb
      - MYSQL_DATABASE=plosreports

  plosqueue:
    image: plos/plosqueue:master
    environment:
      - SOLR_URL=http://solr:8080/solr
      - RHINO_SERVICE=http://rhino:8080
      - COUNTER_DATABASE_URL=jdbc:mysql://counterdb/plosreports
      - COUNTER_DATABASE_USER=ambra
      - COUNTER_DATABASE_PASSWORD=ambra

  ambradb:
    image: percona:5.6
    environment:
      - MYSQL_ROOT_PASSWORD=root
  #  ports:
  #    - 3306:3306

  counterdb:
    image: percona:5.6
    environment:
      - MYSQL_ROOT_PASSWORD=root

  solr:
    image: plos/solr:master
    ports:
      - "8983:8080"
    # volumes:
    #   - "$HOME/datastores/solr:/usr/local/tomcat/solr/home/data"

  contentrepo:
    image: plos/contentrepo:master
    ports:
      - "8085:8080"
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_USER=repouser
      - MYSQL_USER_PASSWORD=
      - MYSQL_HOSTNAME=repodb
      - MYSQL_DATABASE=repo
      - MOGILE_TRACKERS=acker:7001

  repodb:
    image: percona:5.6
    environment:
      - MYSQL_ROOT_PASSWORD=root
    ports:
      - "3305:3306"

  mogiletracker:
    image: plos/mogiletracker
    environment:
      - MYSQL_HOSTNAME=mogiledb
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_USER=mogile
      - MYSQL_USER_PASSWORD=mogile
      # - MYSQL_DATABASE=mogilefs         # TODO: include this
      - MOG_NODE_HOST=mogilenode

  mogilenode:
    image: plos/mogilenode

  mogiledb:
    image: percona:5.6
    environment:
      - MYSQL_ROOT_PASSWORD=root

  # TODO: move this into envoy, or out of compose completely
  testrunner:
    image: testrunner:custom
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DOCKERFILES}:/dockerfiles:ro
      - ${ENVOY}:/envoy:ro
